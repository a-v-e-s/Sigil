==============================================================
switch_prob: ~line52:
	return ((switch_numerator / relatives[key]) * 0.08) =>
	return ((switch_numerator / relatives[key]) * 0.16)

fail_out: ~line 246:
	if fail_count > len(grid[0]) // 24: =>
	if fail_count > len(grid[0]) // 36:
~line 361:
	if fail_count > len(grid[0]) // 24: =>
	if fail_count > len(grid[0]) // 36:

shift: lines ~75 -> ~105:
	0.01, 0.99 =>
	0.002, 0.998
==============================================================

def reset():
	print('usage: row, grid0, grid1, grid2, grid3, negs, positives, keys = reset()')
	grid0 = [[x for x in range(5)] for x in range(5)]
	row, grid1, grid2, grid3 = [], [], [], []
	negs = [-x for x in range(1, len(grid0)+1)]
	positives = [x for x in range(len(grid0))]
	keys = {0: grid0, 1: grid1, 2: grid2, 3: grid3}
	return row, grid0, grid1, grid2, grid3, negs, positives, keys

for a in range(len(keys.keys())-1):
    keys[a+1] = [[0 for x in range(len(keys[a]))] for x in range(len(keys[a]))]
    for b in range(len(keys[0][0])):
        for c in range(len(keys[0][0])):
            keys[a+1][c][negs[b]] = keys[a][positives[b]][c]	